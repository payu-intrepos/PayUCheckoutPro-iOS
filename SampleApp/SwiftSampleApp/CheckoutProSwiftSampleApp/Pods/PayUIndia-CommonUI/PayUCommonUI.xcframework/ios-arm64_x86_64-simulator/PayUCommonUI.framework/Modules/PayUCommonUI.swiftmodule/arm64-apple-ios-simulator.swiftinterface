// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name PayUCommonUI
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import DeveloperToolsSupport
import Foundation
import PayUAnalyticsKit
@_exported import PayUCommonUI
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class PayULoaderView : PayUCommonUI.PayUBaseView {
  @objc @_Concurrency.MainActor @preconcurrency public func updateDescriptionMessage(_ message: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIColor {
  public class var onePayUUIShadowColor: UIKit.UIColor {
    get
  }
  public class var onePayUUISecondaryText: UIKit.UIColor {
    get
  }
  public class var onePayUUIGrey: UIKit.UIColor {
    get
  }
  public class var onePayUUIDefaultColor: UIKit.UIColor {
    get
  }
  public class var payULoaderBoxColor: UIKit.UIColor {
    get
  }
  public class var payULoaderUColor: UIKit.UIColor {
    get
  }
}
@objc public class PayUAnalyticsManager : ObjectiveC.NSObject {
  @objc required public init(analyticsAdditionalInfo: PayUCommonUI.PayUAnalyticsAdditionalInfo)
  @objc public init(forKibana analyticsAdditionalInfo: PayUCommonUI.PayUAnalyticsAdditionalInfo)
  public func logEvent<T>(withEventName eventName: Swift.String, eventData: T, startDate: Foundation.Date?) where T : Swift.Encodable
  @objc public func logEvent(withEventName eventName: Swift.String, eventData: [Swift.String : Any], startDate: Foundation.Date?)
  public func logEvent<T>(withEventName eventName: Swift.String, eventData: T, startDate: Foundation.Date?, type: PayUCommonUI.EventType, severity: PayUCommonUI.Severity) where T : Swift.Encodable
  public func logKibanaEvent<T>(eventData: T, eventName: Swift.String, startDate: Foundation.Date?, type: PayUCommonUI.EventType, severity: PayUCommonUI.Severity, eventStatus: PayUCommonUI.EventStatus? = nil) where T : Swift.Encodable
  @objc public func log(json: [Swift.String : Any])
  @objc public func logKibanaEvent(json: [Swift.String : Any])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PayUAnalyticsUtils {
  public static func getJSON<T>(from object: T) -> [Swift.String : Any]? where T : Swift.Encodable
  public static func getFilteredJSON(from json: [Swift.String : Any?]) -> [Swift.String : Any]
  public static func getTimeDiffInSeconds(from startDate: Foundation.Date?) -> Swift.Double
  public static func getJSONString(from json: [Swift.String : Any]) -> Swift.String?
  public static func convertStringInToJson(stringJson: Swift.String) -> [Swift.String : Any?]?
  public class func convertJSONInToString(from json: [Swift.String : Any?]) -> Swift.String?
  public static func getEventInfoJSON(withEventName event: Swift.String, eventData: [Swift.String : Any], startDate: Foundation.Date?, analyticsAdditionalInfo: PayUCommonUI.PayUAnalyticsAdditionalInfo?, type: PayUCommonUI.EventType = .info, severity: PayUCommonUI.Severity = .low) -> [Swift.String : Any]
  public static func getKibanaEventInfoJSON(withEventName event: Swift.String, eventData: [Swift.String : Any], startDate: Foundation.Date?, analyticsAdditionalInfo: PayUCommonUI.PayUAnalyticsAdditionalInfo?, type: PayUCommonUI.EventType = .info, severity: PayUCommonUI.Severity = .low, status: PayUCommonUI.EventStatus? = nil) -> [Swift.String : Any]
  @objc deinit
}
@objc public class PayUFontFamily : ObjectiveC.NSObject {
  @objc public var regular: Swift.String
  @objc public var medium: Swift.String
  @objc public var semibold: Swift.String
  @objc public var bold: Swift.String
  @objc public init(regular: Swift.String, medium: Swift.String, semibold: Swift.String, bold: Swift.String)
  @objc public static func set(fontFamily: PayUCommonUI.PayUFontFamily)
  @objc public static func reset()
  @objc deinit
}
@objc public enum PayUToastPosition : Swift.Int {
  case center
  case bottom
  case top
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class PayUToastView : UIKit.UIView {
  @objc deinit
}
extension UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func showPayUToast(image: UIKit.UIImage?, message: Swift.String, position: PayUCommonUI.PayUToastPosition)
}
public enum PayUAnalyticsKey : Swift.String, Swift.Codable {
  case merchantName
  case merchantIdentifier
  case time
  case timeMS
  case device
  case deviceId
  case amount
  case transactionIdentifier
  case enforced
  case offerTagShown
  case offerApplied
  case vpaVerified
  case ctaType
  case ctaPage
  case ctaName
  case type
  case identity
  case ts
  case eventName
  case eventData
  case sectionName
  case deviceName
  case deviceVersion
  case sdkVersion
  case isOn
  case eventType
  case eventSeverity
  case screenName
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PayUAnalyticsSectionName : Swift.String, Swift.Codable {
  case quickOptions
  case moreOptions
  case leftSidebar
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PayUAnalyticsValue : Swift.String, Swift.Codable {
  case event
  case iOS
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PayUAnalyticsCTAType : Swift.String, Swift.Codable {
  case action
  case view
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PayUAnalyticsBoolValue : Swift.String, Swift.Codable {
  case yes
  case no
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PayUAnalyticsStatusValue : Swift.String, Swift.Codable {
  case completed
  case failed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EventType : Swift.String {
  case error
  case info
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Severity : Swift.String {
  case high
  case low
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EventStatus : Swift.String {
  case success
  case failure
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class PayUAnalyticsAdditionalInfo : ObjectiveC.NSObject {
  @objc public var transactionId: Swift.String?
  @objc public var transactionAmount: Swift.String?
  @objc public var merchantKey: Swift.String?
  @objc public var merchantName: Swift.String?
  @objc public var enforcedValue: Swift.String?
  @objc public var sdkVersion: Swift.String?
  @objc public var ctaName: Swift.String?
  @objc public var url: Swift.String?
  @objc public var urlLoadingState: Swift.String?
  @objc public var initiatorIdentifier: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class PayULogoView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func removeFromSuperview()
  @objc @_Concurrency.MainActor @preconcurrency public func resetAnimation()
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class PayUCustomOverlay : PayUCommonUI.PayUBaseView {
  @objc @_Concurrency.MainActor @preconcurrency public var animationDuration: Swift.Double
  @_Concurrency.MainActor @preconcurrency public var superViewFrame: CoreFoundation.CGRect?
  @objc @_Concurrency.MainActor @preconcurrency public func showOverlay(onView: UIKit.UIView, subView: UIKit.UIView, disableOnSwipe: Swift.Bool = false, disableOnTap: Swift.Bool = false)
  @objc @_Concurrency.MainActor @preconcurrency public func hideOverlayView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class PayUBaseView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var onViewDismissed: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor @preconcurrency public var onHeightChanged: ((CoreFoundation.CGFloat) -> Swift.Void)?
  @objc @_Concurrency.MainActor @preconcurrency public var touchDisabled: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
extension UIKit.UIFont {
  public var payuSDKFont: UIKit.UIFont {
    get
  }
}
extension UIKit.UIButton {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func payuCustomizeFont()
}
extension UIKit.UILabel {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func payuCustomizeFont()
}
extension UIKit.UITextField {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func payuCustomizeFont()
}
extension UIKit.UITextView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func payuCustomizeFont()
}
@_inheritsConvenienceInitializers @objc public class PayUUIConfigurations : ObjectiveC.NSObject {
  @objc public var primaryColor: UIKit.UIColor
  @objc public var secondaryColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func showPayULoader(message: Swift.String = "", backgroundColor: UIKit.UIColor = .white, alpha: CoreFoundation.CGFloat = 1.0)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func showPayULoader(with message: Swift.String = "", and backgroundColor: UIKit.UIColor = .white)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func hidePayULoader()
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class PayUUserCancellationView : PayUCommonUI.PayUBaseView {
  @objc @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, viewModel: PayUCommonUI.PayUUserCancellationViewModel, uiConfigurations: PayUCommonUI.PayUUIConfigurations)
  @objc deinit
}
extension PayUCommonUI.PayUUserCancellationView : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PayUScreenProtector : ObjectiveC.NSObject {
  @objc public static let shared: PayUCommonUI.PayUScreenProtector
  @objc public var isEnabled: Swift.Bool
  @objc public func startScreenshotProtection(for view: UIKit.UIView)
  @objc public func stopScreenshotProtection(for view: UIKit.UIView)
  @objc public func startScreenRecordingProtection()
  @objc public func stopScreenRecordingProtection()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class PayUSecureContainerView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class PayUUserCancellationViewModel : ObjectiveC.NSObject {
  @objc public init(reasonList: [Swift.String]? = nil, headerText: Swift.String? = nil, analyticsAdditionalInfo: PayUCommonUI.PayUAnalyticsAdditionalInfo)
  @objc deinit
}
extension PayUCommonUI.PayUToastPosition : Swift.Equatable {}
extension PayUCommonUI.PayUToastPosition : Swift.Hashable {}
extension PayUCommonUI.PayUToastPosition : Swift.RawRepresentable {}
extension PayUCommonUI.PayUAnalyticsKey : Swift.Equatable {}
extension PayUCommonUI.PayUAnalyticsKey : Swift.Hashable {}
extension PayUCommonUI.PayUAnalyticsKey : Swift.RawRepresentable {}
extension PayUCommonUI.PayUAnalyticsSectionName : Swift.Equatable {}
extension PayUCommonUI.PayUAnalyticsSectionName : Swift.Hashable {}
extension PayUCommonUI.PayUAnalyticsSectionName : Swift.RawRepresentable {}
extension PayUCommonUI.PayUAnalyticsValue : Swift.Equatable {}
extension PayUCommonUI.PayUAnalyticsValue : Swift.Hashable {}
extension PayUCommonUI.PayUAnalyticsValue : Swift.RawRepresentable {}
extension PayUCommonUI.PayUAnalyticsCTAType : Swift.Equatable {}
extension PayUCommonUI.PayUAnalyticsCTAType : Swift.Hashable {}
extension PayUCommonUI.PayUAnalyticsCTAType : Swift.RawRepresentable {}
extension PayUCommonUI.PayUAnalyticsBoolValue : Swift.Equatable {}
extension PayUCommonUI.PayUAnalyticsBoolValue : Swift.Hashable {}
extension PayUCommonUI.PayUAnalyticsBoolValue : Swift.RawRepresentable {}
extension PayUCommonUI.PayUAnalyticsStatusValue : Swift.Equatable {}
extension PayUCommonUI.PayUAnalyticsStatusValue : Swift.Hashable {}
extension PayUCommonUI.PayUAnalyticsStatusValue : Swift.RawRepresentable {}
extension PayUCommonUI.EventType : Swift.Equatable {}
extension PayUCommonUI.EventType : Swift.Hashable {}
extension PayUCommonUI.EventType : Swift.RawRepresentable {}
extension PayUCommonUI.Severity : Swift.Equatable {}
extension PayUCommonUI.Severity : Swift.Hashable {}
extension PayUCommonUI.Severity : Swift.RawRepresentable {}
extension PayUCommonUI.EventStatus : Swift.Equatable {}
extension PayUCommonUI.EventStatus : Swift.Hashable {}
extension PayUCommonUI.EventStatus : Swift.RawRepresentable {}
