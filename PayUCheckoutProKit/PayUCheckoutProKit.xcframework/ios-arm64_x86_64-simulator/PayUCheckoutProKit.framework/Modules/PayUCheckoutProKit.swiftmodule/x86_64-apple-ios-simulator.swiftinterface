// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PayUCheckoutProKit
import Foundation
import PayUAssetLibraryKit
import PayUBizCoreKit
import PayUCheckoutProBaseKit
@_exported import PayUCheckoutProKit
import PayUCrashReporter
import PayUCustomBrowser
import PayULoggerKit
import PayUNativeOtpAssist
import PayUNetworkReachability
import PayUNetworkingKit
import PayUParamsKit
import PayUUPICoreKit
import Swift
import SwiftUI
import UIKit
import _Concurrency
@objc extension Foundation.NSNotification {
  @objc public static let payuRefreshSodexoView: Foundation.Notification.Name
}
extension PayUCheckoutProKit.PayUPopTip {
  @_Concurrency.MainActor(unsafe) public func performEntranceAnimation(completion: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func performExitAnimation(completion: @escaping () -> Swift.Void)
}
extension PayUCheckoutProKit.PayUPopTip {
  @_Concurrency.MainActor(unsafe) public class func pathWith(rect: CoreGraphics.CGRect, frame: CoreGraphics.CGRect, direction: PayUCheckoutProKit.PopTipDirection, arrowSize: CoreGraphics.CGSize, arrowPosition: CoreGraphics.CGPoint, arrowRadius: CoreGraphics.CGFloat, borderWidth: CoreGraphics.CGFloat = 0, radius: CoreGraphics.CGFloat = 0) -> UIKit.UIBezierPath
}
public enum PopTipDirection {
  case up
  case down
  case left
  case right
  case auto
  case autoHorizontal
  case autoVertical
  case none
  public static func == (a: PayUCheckoutProKit.PopTipDirection, b: PayUCheckoutProKit.PopTipDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PopTipEntranceAnimation {
  case scale
  case transition
  case fadeIn
  case custom
  case none
  public static func == (a: PayUCheckoutProKit.PopTipEntranceAnimation, b: PayUCheckoutProKit.PopTipEntranceAnimation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PopTipExitAnimation {
  case scale
  case fadeOut
  case custom
  case none
  public static func == (a: PayUCheckoutProKit.PopTipExitAnimation, b: PayUCheckoutProKit.PopTipExitAnimation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PopTipActionAnimation {
  case bounce(CoreGraphics.CGFloat?)
  case float(offsetX: CoreGraphics.CGFloat?, offsetY: CoreGraphics.CGFloat?)
  case pulse(CoreGraphics.CGFloat?)
  case none
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PayUPopTip : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var font: UIKit.UIFont
  @objc @_Concurrency.MainActor(unsafe) dynamic open var textColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic open var textAlignment: UIKit.NSTextAlignment
  @objc @_Concurrency.MainActor(unsafe) dynamic open var bubbleColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic open var tipBorderColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic open var tipBorderWidth: CoreGraphics.CGFloat
  @objc @_Concurrency.MainActor(unsafe) dynamic open var tipCornerRadius: CoreGraphics.CGFloat
  @objc @_Concurrency.MainActor(unsafe) dynamic open var isRounded: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic open var tipShadowColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic open var tipShadowOffset: CoreGraphics.CGSize
  @objc @_Concurrency.MainActor(unsafe) dynamic open var tipShadowRadius: Swift.Float
  @objc @_Concurrency.MainActor(unsafe) dynamic open var tipShadowOpacity: Swift.Float
  @objc @_Concurrency.MainActor(unsafe) dynamic open var offset: CoreGraphics.CGFloat
  @objc @_Concurrency.MainActor(unsafe) dynamic open var padding: CoreGraphics.CGFloat
  @objc @_Concurrency.MainActor(unsafe) dynamic open var edgeInsets: UIKit.UIEdgeInsets
  @objc @_Concurrency.MainActor(unsafe) dynamic open var arrowSize: CoreGraphics.CGSize
  @objc @_Concurrency.MainActor(unsafe) dynamic open var arrowRadius: CoreGraphics.CGFloat
  @objc @_Concurrency.MainActor(unsafe) dynamic open var animationIn: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) dynamic open var animationOut: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) dynamic open var delayIn: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) dynamic open var delayOut: Swift.Double
  @_Concurrency.MainActor(unsafe) open var entranceAnimation: PayUCheckoutProKit.PopTipEntranceAnimation
  @_Concurrency.MainActor(unsafe) open var exitAnimation: PayUCheckoutProKit.PopTipExitAnimation
  @_Concurrency.MainActor(unsafe) open var actionAnimation: PayUCheckoutProKit.PopTipActionAnimation
  @objc @_Concurrency.MainActor(unsafe) dynamic open var actionAnimationIn: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) dynamic open var actionAnimationOut: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) dynamic open var actionDelayIn: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) dynamic open var actionDelayOut: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) dynamic open var edgeMargin: CoreGraphics.CGFloat
  @objc @_Concurrency.MainActor(unsafe) dynamic open var bubbleOffset: CoreGraphics.CGFloat
  @objc @_Concurrency.MainActor(unsafe) dynamic open var arrowOffset: CoreGraphics.CGFloat
  @objc @_Concurrency.MainActor(unsafe) dynamic open var maskColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic open var shouldShowMask: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic open var constrainInContainerView: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var from: CoreGraphics.CGRect {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isVisible: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var shouldDismissOnTap: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic open var shouldDismissOnTapOutside: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic open var shouldConsiderOriginatingFrameAsPopTip: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic open var shouldDismissOnSwipeOutside: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic open var startActionAnimationOnShow: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var swipeRemoveGestureDirection: UIKit.UISwipeGestureRecognizer.Direction {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var tapHandler: ((PayUCheckoutProKit.PayUPopTip) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var tapOutsideHandler: ((PayUCheckoutProKit.PayUPopTip) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var swipeOutsideHandler: ((PayUCheckoutProKit.PayUPopTip) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var appearHandler: ((PayUCheckoutProKit.PayUPopTip) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var dismissHandler: ((PayUCheckoutProKit.PayUPopTip) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var entranceAnimationHandler: ((@escaping () -> Swift.Void) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var exitAnimationHandler: ((@escaping () -> Swift.Void) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var arrowPosition: CoreGraphics.CGPoint {
    get
  }
  @_Concurrency.MainActor(unsafe) weak open var containerView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var direction: PayUCheckoutProKit.PopTipDirection {
    get
  }
  @_Concurrency.MainActor(unsafe) open var isAnimating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var backgroundMask: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var tapGestureRecognizer: UIKit.UITapGestureRecognizer? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) open func show(text: Swift.String, direction: PayUCheckoutProKit.PopTipDirection, maxWidth: CoreGraphics.CGFloat, in view: UIKit.UIView, from frame: CoreGraphics.CGRect, duration: Foundation.TimeInterval? = nil)
  @_Concurrency.MainActor(unsafe) open func show(attributedText: Foundation.NSAttributedString, direction: PayUCheckoutProKit.PopTipDirection, maxWidth: CoreGraphics.CGFloat, in view: UIKit.UIView, from frame: CoreGraphics.CGRect, duration: Foundation.TimeInterval? = nil)
  @_Concurrency.MainActor(unsafe) open func show(customView: UIKit.UIView, direction: PayUCheckoutProKit.PopTipDirection, in view: UIKit.UIView, from frame: CoreGraphics.CGRect, duration: Foundation.TimeInterval? = nil)
  @available(iOS 13.0, *)
  @_Concurrency.MainActor(unsafe) open func show<V>(rootView: V, direction: PayUCheckoutProKit.PopTipDirection, in view: UIKit.UIView, from frame: CoreGraphics.CGRect, parent: UIKit.UIViewController, duration: Foundation.TimeInterval? = nil) where V : SwiftUI.View
  @_Concurrency.MainActor(unsafe) open func update(text: Swift.String)
  @_Concurrency.MainActor(unsafe) open func update(attributedText: Foundation.NSAttributedString)
  @_Concurrency.MainActor(unsafe) open func update(customView: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) open func hide(forced: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func startActionAnimation()
  @_Concurrency.MainActor(unsafe) open func stopActionAnimation(_ completion: (() -> Swift.Void)? = nil)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc public protocol PayUCheckoutProDelegate {
  @objc func onPaymentSuccess(response: Any?)
  @objc func onPaymentFailure(response: Any?)
  @objc func onPaymentCancel(isTxnInitiated: Swift.Bool)
  @objc func onError(_ error: Swift.Error?)
  @objc func generateHash(for param: PayUCheckoutProBaseKit.DictOfString, onCompletion: @escaping PayUCheckoutProBaseKit.PayUHashGenerationCompletion)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PayUCheckoutPro : ObjectiveC.NSObject {
  @objc public static func open(on parentVC: UIKit.UIViewController, paymentParam: PayUParamsKit.PayUPaymentParam, config: PayUCheckoutProBaseKit.PayUCheckoutProConfig? = nil, delegate: PayUCheckoutProKit.PayUCheckoutProDelegate)
  @objc public static func start()
  @objc public static func open(on parentVC: UIKit.UIViewController, apiLayer: PayUCheckoutProBaseKit.BaseLayer, delegate: PayUCheckoutProKit.PayUCheckoutProDelegate)
  @objc public static func sdkCrash()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers public class BizWrapper : PayUCheckoutProBaseKit.BaseLayer, PayUCustomBrowser.PUCBWebVCDelegate, PayUNativeOtpAssist.PayUOtpAssistDelegate {
  @objc public var mcpAPIResponse: PayUParamsKit.PayUModelMultiCurrencyPayment?
  @objc public var onViewController: UIKit.UIViewController?
  @objc public var onError: PayUCheckoutProBaseKit.ErrorCompletion?
  @objc override public init(paymentParam: PayUParamsKit.PayUPaymentParam, config: PayUCheckoutProBaseKit.OnePayUBaseConfig?)
  @objc deinit
  @objc override public func fetchPaymentOptions(onCompletion: @escaping PayUCheckoutProBaseKit.FetchPaymentOptionCompletion)
  @objc override public func makePayment(paymentOption: PayUParamsKit.PaymentOption, screenState: PayUCheckoutProBaseKit.ScreenState = .none, onViewController: UIKit.UIViewController, onError: @escaping PayUCheckoutProBaseKit.ErrorCompletion)
  @objc override public func cancelCurrentPayment() -> Swift.Bool
  @objc override public func getBinInfoOf(cardNumber: Swift.String, onCompletion: @escaping PayUCheckoutProBaseKit.GetBinInfoOfCard)
  @objc override public func fetchMCPLookupData(cardBinInfo: PayUParamsKit.CardBinInfo, onCompletion: @escaping () -> ())
  @objc override public func fetchIFSCDetails(_ ifscCode: Swift.String, onCompletion: @escaping PayUCheckoutProBaseKit.VerifyIFSCCompletion)
  @objc override public func getBalanceFromSodexo(_ sourceId: Swift.String)
  @objc override public func image(of imageParam: PayUCheckoutProBaseKit.ImageParam, onCompletion: @escaping PayUCheckoutProBaseKit.ImageCompletion)
  @objc override public func checkEligibility(paymentOption: PayUParamsKit.PaymentOption, onCompletion: @escaping PayUCheckoutProBaseKit.CheckEligibilityCompletion)
  @objc override public func emiDetails(onCompletion: @escaping PayUCheckoutProBaseKit.EMICompletion)
  @objc override public func deleteSavedOption(paymentOption: PayUParamsKit.PaymentOption, onCompletion: @escaping PayUCheckoutProBaseKit.CheckEligibilityCompletion)
  @objc override public func offerDetail(paymentOptions: [PayUParamsKit.PaymentOption], onCompletion: @escaping PayUCheckoutProBaseKit.OfferCompletion)
  @objc public func payUSuccessResponse(_ response: Any!)
  @objc public func payUFailureResponse(_ response: Any!)
  @objc public func payUConnectionError(_ notification: [Swift.AnyHashable : Any]!)
  @objc public func payUTransactionCancel()
  @objc public func payUSuccessResponse(_ payUResponse: Any!, surlResponse: Any!)
  @objc public func payUFailureResponse(_ payUResponse: Any!, furlResponse: Any!)
  @objc public func shouldShowCancelAlert() -> Swift.Bool
  @objc public func onPaymentSuccess(merchantResponse: Swift.String?, payUResponse: Swift.String?)
  @objc public func onPaymentFailure(merchantResponse: Swift.String?, payUResponse: Swift.String?)
  @objc public func onPaymentCancel(isTxnInitiated: Swift.Bool)
  @objc public func onError(errorCode: Swift.String?, errorMessage: Swift.String?)
  @objc public func shouldHandleFallback(payUAcsRequest: PayUNativeOtpAssist.PayUAcsRequest) -> Swift.Bool
}
public typealias SodexoCheckBalanceCompletion = (_ cardDetails: PayUBizCoreKit.PayUModelSodexoCardDetail?, _ errorMessage: Swift.String?) -> ()
@objc @_inheritsConvenienceInitializers @objcMembers public class PaymentParamConstant : ObjectiveC.NSObject {
  @objc public static let udf1: Swift.String
  @objc public static let udf2: Swift.String
  @objc public static let udf3: Swift.String
  @objc public static let udf4: Swift.String
  @objc public static let udf5: Swift.String
  @objc public static let merchantAccessKey: Swift.String
  @objc public static let sourceId: Swift.String
  @objc public static let paymentType: Swift.String
  @objc public static let cardType: Swift.String
  @objc public static let cc: Swift.String
  @objc public static let dc: Swift.String
  @objc public static let card: Swift.String
  @objc public static let nb: Swift.String
  @objc public static let upi: Swift.String
  @objc public static let wallet: Swift.String
  @objc public static let emi: Swift.String
  @objc public static let neftrtgs: Swift.String
  @objc public static let sodexo: Swift.String
  @objc public static let lazypay: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PaymentResponseConstant : ObjectiveC.NSObject {
  @objc public static let payuResponse: Swift.String
  @objc public static let merchantResponse: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class HashConstant : ObjectiveC.NSObject {
  @objc public static let hashString: Swift.String
  @objc public static let hashName: Swift.String
  @objc public static let payment: Swift.String
  @objc public static let paymentRelatedDetailForMobileSDK: Swift.String
  @objc public static let vasForMobileSDK: Swift.String
  @objc public static let checkIsDomestic: Swift.String
  @objc public static let getBinInfo: Swift.String
  @objc public static let olaEligibility: Swift.String
  @objc public static let validateVPA: Swift.String
  @objc public static let getEmiAmountAccordingToInterest: Swift.String
  @objc public static let eligibleBinsForEMI: Swift.String
  @objc public static let deleteUserCard: Swift.String
  @objc public static let offerDetail: Swift.String
  @objc public static let getCheckoutDetails: Swift.String
  @objc public static let mcpLookup: Swift.String
  @objc public static let checkBalance: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BankCodes : ObjectiveC.NSObject {
  @objc public static let paytmWallet: Swift.String
  @objc public static let phonePeWallet: Swift.String
  @objc public static let gPayUPI: Swift.String
  @objc public static let intent: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension PayUCheckoutProKit.PopTipDirection : Swift.Equatable {}
extension PayUCheckoutProKit.PopTipDirection : Swift.Hashable {}
extension PayUCheckoutProKit.PopTipEntranceAnimation : Swift.Equatable {}
extension PayUCheckoutProKit.PopTipEntranceAnimation : Swift.Hashable {}
extension PayUCheckoutProKit.PopTipExitAnimation : Swift.Equatable {}
extension PayUCheckoutProKit.PopTipExitAnimation : Swift.Hashable {}
