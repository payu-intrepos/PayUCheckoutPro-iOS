// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PayUParamsKit
import Foundation
@_exported import PayUParamsKit
import Swift
import UIKit
@objc @_inheritsConvenienceInitializers @objcMembers public class PaymentOption : ObjectiveC.NSObject {
  @objc public var title: Swift.String?
  @objc public var unavailableReason: Swift.String?
  @objc public var offerDetail: Swift.String?
  @objc public var paymentOptionID: Swift.String?
  @objc public var isDown: Swift.Bool
  @objc public var customObj: Any?
  public var convienienceFee: Swift.Double?
  public var taxAmount: Swift.Double?
  public var taxInPercentage: Swift.Double?
  @objc public var txnS2SFlow: Swift.String?
  @objc public var paymentType: PayUParamsKit.PaymentType {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class NetBanking : PayUParamsKit.PaymentOption {
  @objc public var maskedAccountNumber: Swift.String?
  @objc public var beneficiaryParams: PayUParamsKit.PayUBeneficiaryParams?
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CCDC : PayUParamsKit.PaymentOption, Foundation.NSCopying {
  @objc public var cardNumber: Swift.String?
  @objc public var expiryMonth: Foundation.NSNumber?
  @objc public var expiryYear: Foundation.NSNumber?
  @objc public var cvv: Swift.String?
  @objc public var nameOnCard: Swift.String?
  @objc public var cardAlias: Swift.String?
  @objc public var shouldSaveCard: Swift.Bool
  public var cardBinInfo: PayUParamsKit.CardBinInfo?
  public var offerAmount: Swift.Double?
  @objc public var offerCurrency: Swift.String?
  public var offerExchangeRate: Swift.Double?
  @objc public var merchantOrderId: Swift.String?
  @objc public var lookupId: Swift.String?
  override public var taxAmount: Swift.Double? {
    get
    set
  }
  override public var taxInPercentage: Swift.Double? {
    get
    set
  }
  override public var convienienceFee: Swift.Double? {
    get
    set
  }
  @objc override public var isDown: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SavedCard : PayUParamsKit.CCDC {
  @objc public var cardToken: Swift.String?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class UPI : PayUParamsKit.PaymentOption {
  public var isCollect: Swift.Bool?
  @objc public var vpa: Swift.String?
  @objc public var scheme: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@objc @objcMembers public class EMI : PayUParamsKit.CCDC {
  public var month: Swift.Int?
  @objc public var bankShortName: Swift.String
  @objc public var supportedBins: [Swift.String]?
  @objc public var minimumTxnAmount: Swift.Double
  public var emiValue: Swift.Double?
  public var interestRate: Swift.Double?
  public var interestCharged: Swift.Double?
  public init(month: Swift.Int? = nil, bankShortName: Swift.String, title: Swift.String, paymentOptionId: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class Wallet : PayUParamsKit.PaymentOption {
  @objc public var maskedAccountNumber: Swift.String?
  @objc public var phoneNumber: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@objcMembers public class CardBinInfo {
  @objc public init()
  public var taxInPercentage: Swift.Double?
  public var taxAmount: Swift.Double?
  public var convienienceFee: Swift.Double?
  @objc public var isDown: Swift.Bool
  public var cardScheme: PayUParamsKit.CardScheme?
  @objc public var cardSchemeRawValue: Swift.String?
  public var cardType: PayUParamsKit.CardType?
  @objc public var cardTypeRawValue: Swift.String?
  public var isDomestic: Swift.Bool?
  @objc public var bankName: Swift.String?
  @objc public var bin: Swift.String?
  public var isAtmPinCard: Swift.Bool?
  public var isSISupported: Swift.Bool?
  public var isZeroRedirectSupported: Swift.Bool?
  @objc deinit
}
@objc public enum CardType : Swift.Int {
  case cc
  case dc
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CardScheme : Swift.Int {
  case masterCard
  case visa
  case jcb
  case amex
  case maestro
  case rupay
  case discover
  case dinersClub
  case laser
  case stateBankMaestro
  case unknown
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PaymentType : Swift.Int {
  case ccdc
  case netBanking
  case upi
  case wallet
  case emi
  case savedCard
  case other
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class PaymentMode : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var modeName: Swift.String?
  @objc public var subHeading: Swift.String?
  @objc public var offerDetail: Swift.String?
  @objc public var paymentType: PayUParamsKit.PaymentType
  @objc public var options: [PayUParamsKit.PaymentOption]?
  @objc public var isDirectPaymentMode: Swift.Bool
  @objc public init(modeName: Swift.String? = nil, subHeading: Swift.String? = nil, offerDetail: Swift.String? = nil, paymentType: PayUParamsKit.PaymentType, options: [PayUParamsKit.PaymentOption]? = nil)
  @objc convenience public init(paymentType: PayUParamsKit.PaymentType, paymentOptionID: Swift.String? = nil)
  @objc public class func getPaymentModeFrom(paymentModes: [PayUParamsKit.PaymentMode]?, paymentType: PayUParamsKit.PaymentType) -> PayUParamsKit.PaymentMode?
  @objc public class func getAllPaymentOptionsFrom(paymentModes: [PayUParamsKit.PaymentMode]?, paymentType: PayUParamsKit.PaymentType) -> [PayUParamsKit.PaymentOption]?
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers open class PayUModelMCPConversion : ObjectiveC.NSObject {
  @objc public var offerAmount: Foundation.NSNumber?
  @objc public var offerCurrency: Swift.String?
  @objc public var offerExchangeRate: Foundation.NSNumber?
  @objc public var merchantOrderId: Swift.String?
  @objc public var lookupId: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@objc public class PayUBeneficiaryParams : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var beneficiaryName: Swift.String
  @objc public var beneficiaryAccountNumber: Swift.String
  @objc public var beneficiaryIFSC: Swift.String
  @objc public var beneficiaryAccountType: PayUParamsKit.BeneficiaryAccountType
  @objc public init(beneficiaryName: Swift.String, beneficiaryAccountNumber: Swift.String, beneficiaryIFSC: Swift.String, beneficiaryAccountType: PayUParamsKit.BeneficiaryAccountType)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum BeneficiaryAccountType : Swift.Int, Swift.CaseIterable {
  case savings
  case current
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [PayUParamsKit.BeneficiaryAccountType]
  public static var allCases: [PayUParamsKit.BeneficiaryAccountType] {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers open class PayUModelIFSCInfo : ObjectiveC.NSObject {
  @objc public var bank: Swift.String?
  @objc public var branch: Swift.String?
  @objc public var city: Swift.String?
  @objc public var ifsc: Swift.String?
  @objc public var micr: Swift.String?
  @objc public var state: Swift.String?
  @objc public var office: Swift.String?
  @objc public var address: Swift.String?
  @objc public var contact: Swift.String?
  @objc public var district: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers open class PayUModelMultiCurrencyPayment : ObjectiveC.NSObject {
  @objc public var supportedCardSchemes: [Swift.String]?
  @objc public var mcpConversionBeans: [PayUParamsKit.PayUModelMCPConversion]?
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class PayUPaymentCreateRequest : ObjectiveC.NSObject {
  public typealias completionBlockForCreateRequestWithPaymentParam = (Foundation.NSMutableURLRequest?, Swift.String?, Swift.String?) -> Swift.Void
  public func createRequest(param: PayUParamsKit.PayUPaymentParam, completion: (Foundation.NSMutableURLRequest?, Swift.String?, Swift.String?) -> Swift.Void)
  public func getURLRequest(withPostParam postParam: Swift.String?, with paramURL: Foundation.URL?, httpHeaderField headerFields: [Swift.String : Swift.String]?, httpMethod: Swift.String?) -> Foundation.NSMutableURLRequest?
  @objc deinit
  @objc override dynamic public init()
}
@objc public class PayUSIParams : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var billingAmount: Swift.String
  @objc public var paymentStartDate: Foundation.Date
  @objc public var paymentEndDate: Foundation.Date
  @objc public var billingCycle: PayUParamsKit.PayUBillingCycle
  @objc public var billingInterval: Foundation.NSNumber
  @objc public var isFreeTrial: Swift.Bool
  @objc public var remarks: Swift.String?
  @objc public init(billingAmount: Swift.String, paymentStartDate: Foundation.Date, paymentEndDate: Foundation.Date, billingCycle: PayUParamsKit.PayUBillingCycle, billingInterval: Foundation.NSNumber)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum PayUBillingCycle : Swift.Int, Swift.CaseIterable {
  case once
  case daily
  case weekly
  case monthly
  case yearly
  case adhoc
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [PayUParamsKit.PayUBillingCycle]
  public static var allCases: [PayUParamsKit.PayUBillingCycle] {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class PPKUtils : ObjectiveC.NSObject {
  @objc public class func billingCycleToString(_ billingCycle: PayUParamsKit.PayUBillingCycle) -> Swift.String
  @objc public class func beneficiaryAccountTypeToString(_ beneficiaryAccountType: PayUParamsKit.BeneficiaryAccountType) -> Swift.String
  @objc public class func dateFrom(_ dateString: Swift.String) -> Foundation.Date?
  @objc public class func dateStringFrom(_ date: Foundation.Date, formater: Swift.String = Constants.yyyyMMdd) -> Swift.String?
  @objc public class func getJSONIndividualObject(forKey key: Swift.String?, value: Swift.String?) -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class Constants : ObjectiveC.NSObject {
  @objc public static var yyyyMMdd: Swift.String
  @objc public static var ddMMyyyy: Swift.String
  @objc public static let MINIMUM_AMOUNT: Swift.Double
  @objc public static let PG_CCDC: Swift.String
  @objc public static let SURL: Swift.String
  @objc public static let FURL: Swift.String
  @objc public static let PAYMENT: Swift.String
  @objc public static let INSTRUMENT_TYPE: Swift.String
  @objc public static let DEVICE_TYPE_IOS: Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class PayUUserDefines : ObjectiveC.NSObject {
  @objc public var udf1: Swift.String?
  @objc public var udf2: Swift.String?
  @objc public var udf3: Swift.String?
  @objc public var udf4: Swift.String?
  @objc public var udf5: Swift.String?
  @objc public var udf6: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@objc @objcMembers public class PayUPaymentParam : ObjectiveC.NSObject {
  @objc public var key: Swift.String
  @objc public var transactionId: Swift.String
  @objc public var amount: Swift.String
  @objc public var productInfo: Swift.String
  @objc public var firstName: Swift.String
  @objc public var email: Swift.String
  @objc public var phone: Swift.String
  @objc public var surl: Swift.String
  @objc public var furl: Swift.String
  @objc public var userCredential: Swift.String?
  @objc public var additionalParam: [Swift.String : Any]
  @objc public var paymentEnvironment: PayUParamsKit.Environment
  @objc public var siParam: PayUParamsKit.PayUSIParams?
  @objc public var paymentOption: PayUParamsKit.PaymentOption?
  @objc public var hashes: PayUParamsKit.PayUHashes?
  @objc public var udfs: PayUParamsKit.PayUUserDefines?
  @objc public init(key: Swift.String, transactionId: Swift.String, amount: Swift.String, productInfo: Swift.String, firstName: Swift.String, email: Swift.String, phone: Swift.String, surl: Swift.String, furl: Swift.String, environment: PayUParamsKit.Environment)
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum Environment : Swift.Int {
  case production = 0
  case test
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class PayUHashes : ObjectiveC.NSObject {
  @objc public var paymentOptionsHash: Swift.String?
  @objc public var paymentHash: Swift.String?
  @objc public var validateVPAHash: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class PayUPaymentValidations : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension PayUParamsKit.CardType : Swift.Equatable {}
extension PayUParamsKit.CardType : Swift.Hashable {}
extension PayUParamsKit.CardType : Swift.RawRepresentable {}
extension PayUParamsKit.CardScheme : Swift.Equatable {}
extension PayUParamsKit.CardScheme : Swift.Hashable {}
extension PayUParamsKit.CardScheme : Swift.RawRepresentable {}
extension PayUParamsKit.PaymentType : Swift.Equatable {}
extension PayUParamsKit.PaymentType : Swift.Hashable {}
extension PayUParamsKit.PaymentType : Swift.RawRepresentable {}
extension PayUParamsKit.BeneficiaryAccountType : Swift.Equatable {}
extension PayUParamsKit.BeneficiaryAccountType : Swift.Hashable {}
extension PayUParamsKit.BeneficiaryAccountType : Swift.RawRepresentable {}
extension PayUParamsKit.PayUBillingCycle : Swift.Equatable {}
extension PayUParamsKit.PayUBillingCycle : Swift.Hashable {}
extension PayUParamsKit.PayUBillingCycle : Swift.RawRepresentable {}
extension PayUParamsKit.Environment : Swift.Equatable {}
extension PayUParamsKit.Environment : Swift.Hashable {}
extension PayUParamsKit.Environment : Swift.RawRepresentable {}
