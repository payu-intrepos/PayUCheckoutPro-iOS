// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name PayUCheckoutPro
import Foundation
import PayUAssetLibrary
import PayUBizCoreSDK
@_exported import PayUCheckoutPro
import PayUCheckoutProBase
import PayUCustomBrowser
import PayULogger
import PayUNetworking
import SocketIO
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
public struct PayUUPIPaymentOptions : Swift.Codable {
  public let upi: PayUCheckoutPro.PayUPaymentOption?, tez: PayUCheckoutPro.PayUPaymentOption?, tezOmni: PayUCheckoutPro.PayUPaymentOption?, intent: PayUCheckoutPro.PayUPaymentOption?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PayUPaymentOption : Swift.Codable {
  public let supportedApps: [PayUCheckoutPro.PayUSupportedIntentApp]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PayUSupportedIntentApp : Swift.Equatable {
  public let name: Swift.String, scheme: Swift.String
  public static func == (lhs: PayUCheckoutPro.PayUSupportedIntentApp, rhs: PayUCheckoutPro.PayUSupportedIntentApp) -> Swift.Bool
}
public struct PayUTxnVerificationInfo {
}
public enum PayUPaymentType : Swift.Equatable {
  case upiCollect
  case intent(withApp: PayUCheckoutPro.PayUSupportedIntentApp)
  case gpayFallback
  public static func == (lhs: PayUCheckoutPro.PayUPaymentType, rhs: PayUCheckoutPro.PayUPaymentType) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class PayUUPICoreUtils {
  public class func getVersionOfBundle(_ bundle: Foundation.Bundle) -> Swift.String
  public class func getDefaultUPICollectAppsWithHandles() -> [PayUCheckoutPro.PayUSupportedCollectApp]
  @objc deinit
}
extension PopTip {
  public func performEntranceAnimation(completion: @escaping () -> Swift.Void)
  public func performExitAnimation(completion: @escaping () -> Swift.Void)
}
public typealias PayUItemTypeInPaymentHandlesAPI = Swift.Dictionary<Swift.String, Swift.Array<Swift.String>>
public enum NetworkEnvironment : Swift.String {
  case production
  case test
  case mobiletest
  case mobileDev
  case sdkTest
  case bizcheckouttest
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class PayUAPI {
  public class func getUPIPaymentOptions(withPaymentParams params: PayUCheckoutPro.UPIPayUPaymentParams, completion: @escaping (Swift.Result<PayUCheckoutPro.PayUUPIPaymentOptions, PayUCheckoutPro.PayUError>) -> ())
  public class func validateVPA(withPaymentParams params: PayUCheckoutPro.UPIPayUPaymentParams, completion: @escaping (Swift.Result<PayUCheckoutPro.PayUValidateVPAModel, PayUCheckoutPro.PayUError>) -> ())
  public class func getDataForIntentPayment(withPaymentParams params: PayUCheckoutPro.UPIPayUPaymentParams, completion: @escaping (Swift.Result<PayUCheckoutPro.PayUPureS2SModel, PayUCheckoutPro.PayUError>) -> ())
  public class func getDataForGpayIntentPayment(withPaymentParams params: PayUCheckoutPro.UPIPayUPaymentParams, completion: @escaping (Swift.Result<PayUCheckoutPro.PayUPureS2SModel, PayUCheckoutPro.PayUError>) -> ())
  public class func getDataForGPayOmniPayment(withPaymentParams params: PayUCheckoutPro.UPIPayUPaymentParams, completion: @escaping (Swift.Result<PayUCheckoutPro.PayUPureS2SModel, PayUCheckoutPro.PayUError>) -> ())
  public class func getDataForGpayCollectPayment(withPaymentParams params: PayUCheckoutPro.UPIPayUPaymentParams, completion: @escaping (Swift.Result<PayUCheckoutPro.PayUPureS2SModel, PayUCheckoutPro.PayUError>) -> ())
  public class func getDataForUPICollectPayment(withPaymentParams params: PayUCheckoutPro.UPIPayUPaymentParams, completion: @escaping (Swift.Result<PayUCheckoutPro.PayUPureS2SModel, PayUCheckoutPro.PayUError>) -> ())
  public class func getUPIHandles(withPaymentParams params: PayUCheckoutPro.UPIPayUPaymentParams, completion: @escaping (Swift.Result<[PayUCheckoutPro.PayUItemTypeInPaymentHandlesAPI], PayUCheckoutPro.PayUError>) -> ())
  @objc deinit
}
public struct UPIPayUPaymentParams {
  public var merchantKey: Swift.String
  public var transactionId: Swift.String
  public var amount: Swift.String
  public var productInfo: Swift.String
  public var firstName: Swift.String
  public var email: Swift.String
  public var udf1: Swift.String
  public var udf2: Swift.String
  public var udf3: Swift.String
  public var udf4: Swift.String
  public var udf5: Swift.String
  public var vpa: Swift.String?
  public var userCredentials: Swift.String?
  public var phoneNumber: Swift.String?
  public var offerKey: Swift.String?
  public var hashes: PayUCheckoutPro.PayUHashes?
  public var surl: Swift.String?
  public var furl: Swift.String?
  public init(merchantKey: Swift.String, transactionId: Swift.String, amount: Swift.String, productInfo: Swift.String, firstName: Swift.String, email: Swift.String, udf1: Swift.String, udf2: Swift.String, udf3: Swift.String, udf4: Swift.String, udf5: Swift.String) throws
}
extension PopTip {
  public class func pathWith(rect: CoreGraphics.CGRect, frame: CoreGraphics.CGRect, direction: PayUCheckoutPro.PopTipDirection, arrowSize: CoreGraphics.CGSize, arrowPosition: CoreGraphics.CGPoint, arrowRadius: CoreGraphics.CGFloat, borderWidth: CoreGraphics.CGFloat = 0, radius: CoreGraphics.CGFloat = 0) -> UIKit.UIBezierPath
}
public enum PopTipDirection {
  case up
  case down
  case left
  case right
  case auto
  case autoHorizontal
  case autoVertical
  case none
  public static func == (a: PayUCheckoutPro.PopTipDirection, b: PayUCheckoutPro.PopTipDirection) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum PopTipEntranceAnimation {
  case scale
  case transition
  case fadeIn
  case custom
  case none
  public static func == (a: PayUCheckoutPro.PopTipEntranceAnimation, b: PayUCheckoutPro.PopTipEntranceAnimation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum PopTipExitAnimation {
  case scale
  case fadeOut
  case custom
  case none
  public static func == (a: PayUCheckoutPro.PopTipExitAnimation, b: PayUCheckoutPro.PopTipExitAnimation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum PopTipActionAnimation {
  case bounce(CoreGraphics.CGFloat?)
  case float(offsetX: CoreGraphics.CGFloat?, offsetY: CoreGraphics.CGFloat?)
  case pulse(CoreGraphics.CGFloat?)
  case none
}
@objc @_inheritsConvenienceInitializers open class PopTip : UIKit.UIView {
  open var text: Swift.String? {
    get
    set(value)
  }
  open var font: UIKit.UIFont
  @objc dynamic open var textColor: UIKit.UIColor
  @objc dynamic open var textAlignment: UIKit.NSTextAlignment
  @objc dynamic open var bubbleColor: UIKit.UIColor
  @objc dynamic open var tipBorderColor: UIKit.UIColor
  @objc dynamic open var tipBorderWidth: CoreGraphics.CGFloat
  @objc dynamic open var tipCornerRadius: CoreGraphics.CGFloat
  @objc dynamic open var isRounded: Swift.Bool
  @objc dynamic open var tipShadowColor: UIKit.UIColor
  @objc dynamic open var tipShadowOffset: CoreGraphics.CGSize
  @objc dynamic open var tipShadowRadius: Swift.Float
  @objc dynamic open var tipShadowOpacity: Swift.Float
  @objc dynamic open var offset: CoreGraphics.CGFloat
  @objc dynamic open var padding: CoreGraphics.CGFloat
  @objc dynamic open var edgeInsets: UIKit.UIEdgeInsets
  @objc dynamic open var arrowSize: CoreGraphics.CGSize
  @objc dynamic open var arrowRadius: CoreGraphics.CGFloat
  @objc dynamic open var animationIn: Foundation.TimeInterval
  @objc dynamic open var animationOut: Foundation.TimeInterval
  @objc dynamic open var delayIn: Foundation.TimeInterval
  @objc dynamic open var delayOut: Foundation.TimeInterval
  open var entranceAnimation: PayUCheckoutPro.PopTipEntranceAnimation
  open var exitAnimation: PayUCheckoutPro.PopTipExitAnimation
  open var actionAnimation: PayUCheckoutPro.PopTipActionAnimation
  @objc dynamic open var actionAnimationIn: Foundation.TimeInterval
  @objc dynamic open var actionAnimationOut: Foundation.TimeInterval
  @objc dynamic open var actionDelayIn: Foundation.TimeInterval
  @objc dynamic open var actionDelayOut: Foundation.TimeInterval
  @objc dynamic open var edgeMargin: CoreGraphics.CGFloat
  @objc dynamic open var bubbleOffset: CoreGraphics.CGFloat
  @objc dynamic open var arrowOffset: CoreGraphics.CGFloat
  @objc dynamic open var maskColor: UIKit.UIColor
  @objc dynamic open var shouldShowMask: Swift.Bool
  @objc dynamic open var constrainInContainerView: Swift.Bool
  open var from: CoreGraphics.CGRect {
    get
    set(value)
  }
  open var isVisible: Swift.Bool {
    get
  }
  @objc dynamic open var shouldDismissOnTap: Swift.Bool
  @objc dynamic open var shouldDismissOnTapOutside: Swift.Bool
  @objc dynamic open var shouldConsiderOriginatingFrameAsPopTip: Swift.Bool
  @objc dynamic open var shouldDismissOnSwipeOutside: Swift.Bool
  @objc dynamic open var startActionAnimationOnShow: Swift.Bool
  open var swipeRemoveGestureDirection: UIKit.UISwipeGestureRecognizer.Direction {
    get
    set(value)
  }
  open var tapHandler: ((PayUCheckoutPro.PopTip) -> Swift.Void)?
  open var tapOutsideHandler: ((PayUCheckoutPro.PopTip) -> Swift.Void)?
  open var swipeOutsideHandler: ((PayUCheckoutPro.PopTip) -> Swift.Void)?
  open var appearHandler: ((PayUCheckoutPro.PopTip) -> Swift.Void)?
  open var dismissHandler: ((PayUCheckoutPro.PopTip) -> Swift.Void)?
  open var entranceAnimationHandler: ((@escaping () -> Swift.Void) -> Swift.Void)?
  open var exitAnimationHandler: ((@escaping () -> Swift.Void) -> Swift.Void)?
  open var arrowPosition: CoreGraphics.CGPoint {
    get
  }
  weak open var containerView: UIKit.UIView? {
    get
  }
  open var direction: PayUCheckoutPro.PopTipDirection {
    get
  }
  open var isAnimating: Swift.Bool {
    get
  }
  open var backgroundMask: UIKit.UIView? {
    get
  }
  open var tapGestureRecognizer: UIKit.UITapGestureRecognizer? {
    get
  }
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  open func show(text: Swift.String, direction: PayUCheckoutPro.PopTipDirection, maxWidth: CoreGraphics.CGFloat, in view: UIKit.UIView, from frame: CoreGraphics.CGRect, duration: Foundation.TimeInterval? = nil)
  open func show(attributedText: Foundation.NSAttributedString, direction: PayUCheckoutPro.PopTipDirection, maxWidth: CoreGraphics.CGFloat, in view: UIKit.UIView, from frame: CoreGraphics.CGRect, duration: Foundation.TimeInterval? = nil)
  open func show(customView: UIKit.UIView, direction: PayUCheckoutPro.PopTipDirection, in view: UIKit.UIView, from frame: CoreGraphics.CGRect, duration: Foundation.TimeInterval? = nil)
  @available(iOS 13.0, *)
  open func show<V>(rootView: V, direction: PayUCheckoutPro.PopTipDirection, in view: UIKit.UIView, from frame: CoreGraphics.CGRect, parent: UIKit.UIViewController, duration: Foundation.TimeInterval? = nil) where V : SwiftUI.View
  open func update(text: Swift.String)
  open func update(attributedText: Foundation.NSAttributedString)
  open func update(customView: UIKit.UIView)
  @objc open func hide(forced: Swift.Bool = false)
  open func startActionAnimation()
  open func stopActionAnimation(_ completion: (() -> Swift.Void)? = nil)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public struct PayUHashes {
  public var paymentOptionsHash: Swift.String?
  public var paymentHash: Swift.String?
  public var validateVPAHash: Swift.String?
  public init()
}
@_hasMissingDesignatedInitializers public class PayUValidator {
  public class func isValidMobile(_ mobile: Swift.String) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PayUAnalyticsEvent {
  public class func transactionStarted()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PayUAnalyticsSender {
  public class func sendOneTimeAnalytics()
  public class func sendUserAction(_ action: Swift.String)
  public class func sendAPIfailed(forAPI api: PayUCheckoutPro.PayUCoreAPI)
  public class func sendTotalTxnTime(_ time: Swift.Int)
  public class func sendPaymentVerifiedIn(_ time: Swift.Int)
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
  case UnableToGetInitialFlags
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public var ReachabilityChangedNotification: Foundation.NSNotification.Name
extension NSNotification.Name {
  public static var reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (PayUCheckoutPro.Reachability) -> ()
  public typealias NetworkUnreachable = (PayUCheckoutPro.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable
    case reachableViaWiFi
    case reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: PayUCheckoutPro.Reachability.NetworkStatus, b: PayUCheckoutPro.Reachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Connection : Swift.CustomStringConvertible {
    case none
    case wifi
    case cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: PayUCheckoutPro.Reachability.Connection, b: PayUCheckoutPro.Reachability.Connection) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var whenReachable: PayUCheckoutPro.Reachability.NetworkReachable?
  public var whenUnreachable: PayUCheckoutPro.Reachability.NetworkUnreachable?
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: PayUCheckoutPro.Reachability.Connection {
    get
  }
  public var connection: PayUCheckoutPro.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  public convenience init?(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  public convenience init?(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  @objc deinit
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  public var isReachable: Swift.Bool {
    get
  }
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public struct PayUValidateVPAModel : Swift.Codable {
  public let status: Swift.String
  public let msg: Swift.String?
  public let vpa: Swift.String?
  public let isVPAValid: Swift.Int?
  public let payerAccountName: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum PayUPaymentApp {
  case phonepe(withAppData: PayUCheckoutPro.PayUSupportedCollectApp)
  case gpay(withAppData: PayUCheckoutPro.PayUSupportedCollectApp)
  case paytm(withAppData: PayUCheckoutPro.PayUSupportedCollectApp)
  case bhim(withAppData: PayUCheckoutPro.PayUSupportedCollectApp)
  case gpayOmni
  case new
  case unknown
  public static var PHONEPE: Swift.String
  public static var GPAY: Swift.String
  public static var PAYTM: Swift.String
  public static var BHIM: Swift.String
}
extension PayUPaymentApp {
  public static func from(collectApp: PayUCheckoutPro.PayUSupportedCollectApp) -> PayUCheckoutPro.PayUPaymentApp
}
extension PayUPaymentApp {
  public var checkoutDisplayName: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var loaderDisplayName: Swift.String {
    get
  }
  public var iconImage: UIKit.UIImage {
    get
  }
  public var suffixList: [Swift.String] {
    get
  }
  public var validationRegex: Swift.String {
    get
  }
  public var isVPAValidationRequired: Swift.Bool {
    get
  }
}
extension PayUPaymentApp : Swift.Equatable {
  public static func == (lhs: PayUCheckoutPro.PayUPaymentApp, rhs: PayUCheckoutPro.PayUPaymentApp) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class PayUThirdPartyManager {
  public class func makePayment(withApp app: PayUCheckoutPro.PayUSupportedIntentApp, withIntentModel model: PayUCheckoutPro.PayUPureS2SModel, appSwitchingStatus: @escaping ((Swift.Bool) -> ()))
  @objc deinit
}
extension UIDevice {
  public static var payuModelName: Swift.String
}
extension NSRegularExpression {
  public convenience init(_ pattern: Swift.String)
  public func matches(_ string: Swift.String) -> Swift.Bool
}
@objc public protocol PayUCheckoutProDelegate : AnyObject {
  @objc func onPaymentSuccess(response: Any?)
  @objc func onPaymentFailure(response: Any?)
  @objc func onPaymentCancel(isTxnInitiated: Swift.Bool)
  @objc func onError(_ error: Swift.Error?)
  @objc func generateHash(for param: PayUCheckoutProBase.DictOfString, onCompletion: @escaping PayUCheckoutProBase.PayUHashGenerationCompletion)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PayUCheckoutPro : ObjectiveC.NSObject {
  @objc public static func open(on parentVC: UIKit.UIViewController, paymentParam: PayUCheckoutProBase.PayUPaymentParams, config: PayUCheckoutPro.PayUCheckoutProConfig? = nil, delegate: PayUCheckoutPro.PayUCheckoutProDelegate)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PayUCheckoutProConfig : ObjectiveC.NSObject {
  @objc public var merchantName: Swift.String?
  @objc public var merchantLogo: UIKit.UIImage?
  @objc public var paymentModesOrder: [PayUCheckoutProBase.PaymentMode]?
  @objc public var cartDetails: [[Swift.String : Swift.String]]?
  @objc public var showExitConfirmationOnCheckoutScreen: Swift.Bool
  @objc public var showExitConfirmationOnPaymentScreen: Swift.Bool
  @objc public func customiseUI(primaryColor: UIKit.UIColor, secondaryColor: UIKit.UIColor)
  public var autoSelectOtp: Swift.Bool?
  public var surePayCount: Swift.UInt?
  public var merchantResponseTimeout: Foundation.TimeInterval?
  @objc deinit
  @objc override dynamic public init()
}
public typealias PayUResponseType = Swift.Result<Swift.Dictionary<Swift.String, Any>, PayUCheckoutPro.PayUError>
public enum PayUValidationError {
}
public enum PayUSDKError {
  public static var socketURLError: Swift.String
  public static var decodingError: Swift.String
  public static var dataUnavailable: Swift.String
  public static var backButtonTxnCancelled: Swift.String
  public static var unknownErrorMsg: Swift.String
  public static var internetUnavailable: Swift.String
}
public enum PayUError : Foundation.LocalizedError {
  case error(_: Swift.String)
  case unknownError
  case noInternet
  public var description: Swift.String {
    get
  }
  public static func == (lhs: PayUCheckoutPro.PayUError, rhs: PayUCheckoutPro.PayUError) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class PayUUPIAnalytics {
  public static var shared: PayUCheckoutPro.PayUUPIAnalytics
  public var analyticsString: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PayUUPICore {
  public static var shared: PayUCheckoutPro.PayUUPICore
  public var environment: PayUCheckoutPro.NetworkEnvironment
  public var logLevel: PayULogger.PayULogLevel {
    get
    set(value)
  }
  public var paymentCompletion: ((PayUCheckoutPro.PayUResponseType) -> Swift.Void)?
  public var backPressed: (() -> Swift.Void)?
  public var onEnteringVPA: ((Swift.String, @escaping ((Swift.Result<PayUCheckoutPro.UPIPayUPaymentParams, PayUCheckoutPro.PayUError>) -> ())) -> Swift.Void)?
  public var upiSdkVersion: Swift.String?
  public var txnStartTime: Foundation.Date?
  public class func getInstalledAppsList(forUpiOptions options: PayUCheckoutPro.PayUUPIPaymentOptions) -> [PayUCheckoutPro.PayUSupportedIntentApp]
  public class func getURI(forApp app: PayUCheckoutPro.PayUSupportedIntentApp, fromModel model: PayUCheckoutPro.PayUPureS2SModel) -> Foundation.URL?
  public class func getScheme(ofApp appName: Swift.String, withAllUpiOptions options: PayUCheckoutPro.PayUUPIPaymentOptions) -> Swift.String
  public class func canUseIntent(forApp app: PayUCheckoutPro.PayUSupportedIntentApp, withUpiOptions options: PayUCheckoutPro.PayUUPIPaymentOptions) -> Swift.Bool
  public class func canUseUpiCollect(withPaymentOptions options: PayUCheckoutPro.PayUUPIPaymentOptions) -> Swift.Bool
  public class func canUseGpayOmni(withPaymentOptions options: PayUCheckoutPro.PayUUPIPaymentOptions) -> Swift.Bool
  public class func canUseGpayCollect(withPaymentOptions options: PayUCheckoutPro.PayUUPIPaymentOptions) -> Swift.Bool
  public class func canUseGpayApp(withPaymentOptions options: PayUCheckoutPro.PayUUPIPaymentOptions) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PayUPersistentStore {
  public class func saveRemainingTxnSecsBeforeMovingToBackground(_ seconds: Swift.Int, txnUniqueId: Swift.String)
  public class func getRemainingTxnSecsBeforeMovingToBackground(forTxnUniqueId id: Swift.String) -> Swift.Int?
  public class func removeRemainingTxnSecsBeforeMovingToBackground()
  public class func saveBackgroundEnteringTimeStamp(_ dateTime: Foundation.Date, txnUniqueId: Swift.String)
  public class func getBackgroundEnteringTimeStamp(forTxnUniqueId id: Swift.String) -> Foundation.Date?
  public class func removeBackgroundEnteringTimeStamp()
  public class func saveSocketConnectionModel(_ model: PayUCheckoutPro.PayUPureS2SModel)
  public class func getSocketConnectionModel() -> PayUCheckoutPro.PayUPureS2SModel?
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers public class BizWrapper : PayUCheckoutProBase.BaseLayer, PayUCustomBrowser.PUCBWebVCDelegate {
  @objc override public init(paymentParam: PayUCheckoutProBase.PayUPaymentParams)
  @objc public convenience init(paymentParam: PayUCheckoutProBase.PayUPaymentParams, paymentModesOrder: [PayUCheckoutProBase.PaymentMode]?)
  @objc deinit
  @objc override public func fetchPaymentOptions(onCompletion: @escaping PayUCheckoutProBase.FetchPaymentOptionCompletion)
  @objc override public func makePayment(paymentOption: PayUCheckoutProBase.PaymentOption, screenState: PayUCheckoutProBase.ScreenState = .none, onViewController: UIKit.UIViewController, onError: @escaping PayUCheckoutProBase.ErrorCompletion)
  @objc override public func cancelCurrentPayment() -> Swift.Bool
  override public func getBinInfoOf(cardNumber: Swift.String, onCompletion: @escaping PayUCheckoutProBase.GetBinInfoOfCard)
  @objc override public func image(of imageParam: PayUCheckoutProBase.ImageParam, onCompletion: @escaping PayUCheckoutProBase.ImageCompletion)
  @objc override public func checkEligibility(paymentOption: PayUCheckoutProBase.PaymentOption, onCompletion: @escaping PayUCheckoutProBase.CheckEligibilityCompletion)
  @objc public func payUSuccessResponse(_ response: Any!)
  @objc public func payUFailureResponse(_ response: Any!)
  @objc public func payUConnectionError(_ notification: [Swift.AnyHashable : Any]!)
  @objc public func payUTransactionCancel()
  @objc public func payUSuccessResponse(_ payUResponse: Any!, surlResponse: Any!)
  @objc public func payUFailureResponse(_ payUResponse: Any!, furlResponse: Any!)
  @objc public func shouldDismissVCOnBackPress()
}
public struct PayUPureS2SModel : Swift.Codable {
  public var status: Swift.Int?
  public var referenceId: Swift.String
  public var pushServiceUrl: Swift.String
  public var upiServicePollInterval: Swift.String
  public var sdkUpiPushExpiry: Swift.String
  public var sdkUpiVerificationInterval: Swift.String
  public var intentURIData: Swift.String?
  public var appName: Swift.String?
  public var amount: Swift.String?
  public var txnId: Swift.String?
  public var token: Swift.String?
  public var returnUrl: Swift.String?
  public var merchantName: Swift.String?
  public var merchantVpa: Swift.String?
  public var vpaRegex: Swift.String?
  public var result: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum PayUCoreAPI : Swift.String {
  case validateVPA
  case fetchVPAHandles
  case getPaymentOptions
  case initiateGpayIntentS2s
  case initiateGpayOmniS2s
  case initiateGpayCollectS2s
  case initiateGenericIntentS2s
  case initiateUpiCollectS2s
  case verifyTxn
  case finishTxn
  case cancelTxn
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PaymentParamConstant : ObjectiveC.NSObject {
  @objc public static var udf1: Swift.String
  @objc public static var udf2: Swift.String
  @objc public static var udf3: Swift.String
  @objc public static var udf4: Swift.String
  @objc public static var udf5: Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PaymentResponseConstant : ObjectiveC.NSObject {
  @objc public static var payuResponse: Swift.String
  @objc public static var merchantResponse: Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class HashConstant : ObjectiveC.NSObject {
  @objc public static var hashString: Swift.String
  @objc public static var hashName: Swift.String
  @objc public static var payment: Swift.String
  @objc public static var paymentRelatedDetailForMobileSDK: Swift.String
  @objc public static var vasForMobileSDK: Swift.String
  @objc public static var checkIsDomestic: Swift.String
  @objc public static var olaEligibility: Swift.String
  @objc public static var validateVPA: Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BankCodes : ObjectiveC.NSObject {
  @objc public static var paytmWallet: Swift.String
  @objc public static var phonePeWallet: Swift.String
  @objc public static var gPayUPI: Swift.String
  @objc deinit
  @objc override dynamic public init()
}
public struct PayUSupportedCollectApp {
  public let name: Swift.String
  public let handles: [Swift.String]
  public init?(withItem item: PayUCheckoutPro.PayUItemTypeInPaymentHandlesAPI)
  public init(appName: Swift.String, handles: [Swift.String])
}
